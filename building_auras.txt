# Building WeakAuras: Comprehensive Guide for AI Implementation
Version: 1.2.0 | Last Updated: 2023-04-14

## Navigation
- [1. Core Concepts & Architecture](#1-core-concepts-architecture)
- [2. Implementation Patterns](#2-implementation-patterns)
- [3. Advanced Techniques](#3-advanced-techniques)
- [4. Testing & Troubleshooting](#4-testing-troubleshooting)
  - [4.1 Common Issues and Solutions](#41-common-issues-and-solutions)
  - [4.2 Debugging Techniques](#42-debugging-techniques)
  - [4.3 Testing Framework](#43-testing-framework)
  - [4.4 Best Practices](#44-best-practices)
  - [4.5 Advanced Troubleshooting](#45-advanced-troubleshooting)
- [5. Resources & References](#5-resources-references)
  - [5.9 Classic WoW Nameplate Unit Data](#59-classic-wow-nameplate-unit-data)

> **Related Documentation**: 
> - For profile creation: See [how_profiles_work.txt](how_profiles_work.txt)
> - For project overview: See [README.md](README.md)
> - For all documentation: See [ProjectFileIndex.md](ProjectFileIndex.md)

## Table of Contents
1. Core Concepts & Architecture
2. Implementation Patterns
3. Advanced Techniques
4. Testing & Troubleshooting
5. Resources & References

## 1. Core Concepts & Architecture

### 1.1 WeakAura Fundamentals
- WeakAuras are custom displays that react to game conditions
- Each WeakAura consists of triggers, conditions, and actions
- WeakAuras operate within WoW's secure environment
- Custom triggers use Lua 5.1 compatible code
- In WeakAuras, the helper function needs to be defined before it's used, and it needs to be within the main function scope.

### 1.2 Basic Components
1. **Triggers**: Define when the aura should activate
   - Status Triggers: Monitor continuous states
   - Event Triggers: React to specific events
   - Custom Triggers: Complex logic and state management

2. **Conditions**: Additional requirements for activation
   - Combat state
   - Unit existence
   - Resource thresholds
   - Group composition

3. **Actions**: What happens when triggered
   - Visual updates
   - Mark management
   - State changes
   - Combat responses

### 1.3 Development Process
1. **Analysis**:
   ```lua
   -- Key considerations
   -- 1. What exact condition needs monitoring?
   -- 2. Which API calls are required?
   -- 3. What are the performance implications?
   -- 4. What states need tracking?
   ```

2. **Design**:
   ```lua
   -- Core structure
   function(allstates)
       -- 1. Initialize state variables
       aura_env.states = aura_env.states or {}
       
       -- 2. Define helper functions
       local function validateConditions()
           -- Validation logic
       end
       
       -- 3. Main processing logic
       if validateConditions() then
           -- Update states
       end
       
       return true
   end
   ```

3. **Implementation Best Practices**:
   - Use early returns for invalid conditions
   - Initialize all state variables
   - Implement clear error handling
   - Add descriptive comments
   - Follow WoW API security guidelines

## 2. Implementation Patterns

### 2.1 State Management

#### Basic State Tracking
```lua
function(allstates)
    -- Initialize state variables
    aura_env.states = aura_env.states or {}
    aura_env.last = aura_env.last or 0
    
    -- Performance throttling
    if not aura_env.last or GetTime() - aura_env.last > 0.2 then
        aura_env.last = GetTime()
        
        -- Update states
        allstates[""] = allstates[""] or {show = false}
        allstates[""].changed = true
        allstates[""].show = true
        
        return true
    end
    return false
end
```

#### Multi-State Management
```lua
function(allstates)
    -- Initialize tracking tables
    aura_env.activeStates = aura_env.activeStates or {}
    aura_env.pendingUpdates = aura_env.pendingUpdates or {}
    
    -- Process state updates
    for key, value in pairs(aura_env.pendingUpdates) do
        allstates[key] = allstates[key] or {show = false}
        allstates[key].changed = true
        allstates[key].value = value
        allstates[key].show = value > 0
    end
    
    -- Cleanup old states
    for key in pairs(allstates) do
        if not aura_env.activeStates[key] then
            allstates[key].show = false
            allstates[key].changed = true
        end
    end
    
    return true
end
```

### 2.2 Event Handling

#### Combat Log Processing
```lua
function(allstates, event, ...)
    if event == "COMBAT_LOG_EVENT_UNFILTERED" then
        local timestamp, subevent, _, sourceGUID, sourceName, _, _, 
              destGUID, destName, _, _, spellID = CombatLogGetCurrentEventInfo()
              
        if subevent == "SPELL_CAST_SUCCESS" then
            allstates[destGUID] = allstates[destGUID] or {show = false}
            allstates[destGUID].show = true
            allstates[destGUID].changed = true
            allstates[destGUID].spellID = spellID
            
            -- Auto-hide after 2 seconds
            C_Timer.After(2, function()
                allstates[destGUID].show = false
                allstates[destGUID].changed = true
                WeakAuras.ScanEvents("TRIGGER_RESET")
            end)
        end
    end
    return true
end
```

### 2.3 Unit Tracking

#### Nameplate Scanning
```lua
function(allstates)
    if not aura_env.last or GetTime() - aura_env.last > 0.3 then
        aura_env.last = GetTime()
        
        -- Scan visible nameplates
        for i = 1, 40 do
            local unit = "nameplate"..i
            if UnitExists(unit) and UnitCanAttack("player", unit) then
                local guid = UnitGUID(unit)
                if guid then
                    allstates[guid] = allstates[guid] or {show = false}
                    allstates[guid].show = true
                    allstates[guid].changed = true
                    allstates[guid].unit = unit
                end
            end
        end
        
        -- Cleanup non-existent units
        for guid, state in pairs(allstates) do
            if not UnitExists(state.unit) then
                state.show = false
                state.changed = true
            end
        end
        
        return true
    end
    return false
end
```

### 2.4 Pet & Aggro Management

#### Pet Aggro State Tracking
```lua
function(allstates)
    -- Initialize tracking variables
    aura_env.aggroUnits = aura_env.aggroUnits or {}
    aura_env.previousMarks = aura_env.previousMarks or {}
    
    local function HasPlayerAggro(unit)
        if not UnitExists(unit) then return false end
        
        local targetUnit = unit.."target"
        if not UnitExists(targetUnit) then return false end
        
        -- Check pet aggro first
        if UnitExists("pet") and UnitIsUnit(targetUnit, "pet") then
            return false
        end
        
        return UnitIsUnit(targetUnit, "player")
    end
    
    -- Scan units and update marks
    for i = 1, 40 do
        local unit = "nameplate"..i
        if UnitExists(unit) then
            local guid = UnitGUID(unit)
            if guid then
                local hasAggro = HasPlayerAggro(unit)
                local currentMark = GetRaidTargetIndex(unit)
                
                if hasAggro then
                    -- Store previous mark and apply triangle
                    if not aura_env.aggroUnits[guid] and currentMark then
                        aura_env.previousMarks[guid] = currentMark
                    end
                    SetRaidTarget(unit, TRIANGLE)
                    aura_env.aggroUnits[guid] = true
                elseif aura_env.aggroUnits[guid] then
                    -- Restore previous mark when aggro is lost
                    local previousMark = aura_env.previousMarks[guid]
                    SetRaidTarget(unit, previousMark or 0)
                    aura_env.aggroUnits[guid] = nil
                    aura_env.previousMarks[guid] = nil
                end
            end
        end
    end
    
    return true
end
```

### 2.5 Inter-Aura Communication

#### Sharing Data Between Auras
```lua
-- Method 1: Using WeakAuras.GetData()
-- In Source Aura (e.g., TTD Calculator)
aura_env.sharedData = aura_env.sharedData or {}
aura_env.sharedData.ttd = 5.2
aura_env.sharedData.totalDPS = 1250

-- In Consumer Aura (e.g., Spell Suggester)
local ttdAura = WeakAuras.GetData("TTDCalculator")
if ttdAura and ttdAura.sharedData then
    local ttd = ttdAura.sharedData.ttd
    local dps = ttdAura.sharedData.totalDPS
end
```

#### Custom Event Communication
```lua
-- In Source Aura
WeakAuras.ScanEvents("TTD_UPDATE", ttdValue, totalDPS)

-- In Consumer Aura (needs to register for "TTD_UPDATE" event)
function(allstates, event, ...)
    if event == "TTD_UPDATE" then
        local ttd, dps = ...
        -- Handle the TTD update
        allstates[""].ttd = ttd
        allstates[""].dps = dps
        allstates[""].changed = true
    end
end
```

#### Best Practices for Inter-Aura Communication
1. **Data Sharing**
   - Use meaningful data structure names
   - Document shared data format
   - Include version checking
   - Handle nil cases

2. **Event Broadcasting**
   - Use descriptive event names
   - Include relevant data
   - Handle missing subscribers
   - Implement error checking

3. **Performance Considerations**
   - Throttle update frequency
   - Minimize shared data size
   - Clean up stale references
   - Cache frequently accessed data

## 3. Advanced Techniques

### 3.1 Performance Optimization

#### Throttling Pattern
```lua
function(allstates)
    -- Initialize throttle timer
    aura_env.last = aura_env.last or 0
    
    -- Throttle updates (0.2s minimum between updates)
    if not aura_env.last or GetTime() - aura_env.last > 0.2 then
        aura_env.last = GetTime()
        -- Main processing logic here
        return true
    end
    return false
end
```

#### State Caching
```lua
-- Example: Caching unit data
aura_env.unitCache = aura_env.unitCache or {
    data = {},
    timestamp = 0,
    duration = 0.5  -- Cache duration in seconds
}

local function getUnitData(unit)
    local guid = UnitGUID(unit)
    local currentTime = GetTime()
    
    -- Return cached data if valid
    if aura_env.unitCache.data[guid] and 
       currentTime - aura_env.unitCache.timestamp < aura_env.unitCache.duration then
        return aura_env.unitCache.data[guid]
    end
    
    -- Update cache with new data
    local data = {
        health = UnitHealth(unit),
        maxHealth = UnitHealthMax(unit),
        power = UnitPower(unit),
        position = {unit:GetPosition()}
    }
    
    aura_env.unitCache.data[guid] = data
    aura_env.unitCache.timestamp = currentTime
    
    return data
end
```

### 3.2 Priority Systems

#### Spell Priority Management
```lua
local SPELL_PRIORITIES = {
    INTERRUPT = 4,    -- Highest priority
    HEALING = 3,
    CONTROL = 2,
    DAMAGE = 1       -- Lowest priority
}

local function getSpellPriority(spellID, targetUnit)
    -- Early exit if spell or unit is invalid
    if not spellID or not UnitExists(targetUnit) then return 0 end
    
    -- Get spell category and base priority
    local category = GetSpellCategory(spellID)
    local basePriority = SPELL_PRIORITIES[category] or 0
    
    -- Adjust priority based on conditions
    local adjustedPriority = basePriority
    
    -- Increase priority for low health targets
    if UnitHealth(targetUnit)/UnitHealthMax(targetUnit) < 0.3 then
        adjustedPriority = adjustedPriority + 1
    end
    
    -- Increase priority for player targets
    if UnitIsUnit(targetUnit.."target", "player") then
        adjustedPriority = adjustedPriority + 2
    end
    
    return adjustedPriority
end
```

### 3.3 State Transitions

#### State Machine Pattern
```lua
local STATE_TRANSITIONS = {
    IDLE = {
        onEnter = function(allstates) end,
        onExit = function(allstates) end,
        transitions = {
            COMBAT = function() return UnitAffectingCombat("player") end,
            CASTING = function() return UnitCastingInfo("player") end
        }
    },
    COMBAT = {
        onEnter = function(allstates)
            allstates[""].show = true
            allstates[""].changed = true
        end,
        onExit = function(allstates)
            allstates[""].show = false
            allstates[""].changed = true
        end,
        transitions = {
            IDLE = function() return not UnitAffectingCombat("player") end
        }
    }
}

function(allstates)
    aura_env.currentState = aura_env.currentState or "IDLE"
    local state = STATE_TRANSITIONS[aura_env.currentState]
    
    -- Check transitions
    for newState, condition in pairs(state.transitions) do
        if condition() then
            -- Execute state change
            state.onExit(allstates)
            aura_env.currentState = newState
            STATE_TRANSITIONS[newState].onEnter(allstates)
            return true
        end
    end
    
    return false
end
```

### 3.4 Debug Tools

#### Performance Testing Framework
```lua
local DebugTools = {
    enabled = false,
    timers = {},
    
    startTimer = function(self, key)
        if not self.enabled then return end
        self.timers[key] = debugprofilestop()
    end,
    
    stopTimer = function(self, key)
        if not self.enabled or not self.timers[key] then return end
        local duration = debugprofilestop() - self.timers[key]
        print(string.format("%s: %.2fms", key, duration))
        self.timers[key] = nil
    end,
    
    log = function(self, ...)
        if not self.enabled then return end
        print(string.format("[DEBUG] %s", string.format(...)))
    end
}

-- Usage example
function(allstates)
    DebugTools:startTimer("scan")
    -- Scanning logic here
    DebugTools:stopTimer("scan")
    
    DebugTools:log("Processed %d units", numUnits)
end
```

### 3.5 Error Prevention

#### Validation Patterns
```lua
local function validateUnit(unit)
    if not unit then return false end
    if not UnitExists(unit) then return false end
    if not UnitIsVisible(unit) then return false end
    if UnitIsDeadOrGhost(unit) then return false end
    return true
end

local function validateGUID(guid)
    if not guid then return false end
    local unitType = strsplit("-", guid)
    return unitType ~= nil
end

local function safeGetUnitData(unit)
    if not validateUnit(unit) then
        return nil, "Invalid unit"
    end
    
    local guid = UnitGUID(unit)
    if not validateGUID(guid) then
        return nil, "Invalid GUID"
    end
    
    return {
        guid = guid,
        name = UnitName(unit),
        health = UnitHealth(unit),
        maxHealth = UnitHealthMax(unit)
    }
end
```

### 3.6 Unsupported or Risky Features
- goto statements (not supported in Lua 5.1/WoW Classic)
- labels (not supported in Lua 5.1/WoW Classic)
- Complex control flow structures
- Certain Lua 5.1+ features

### 3.7 Best Practices
- Use early returns for flow control
- Implement clear conditional blocks
- Keep code within WeakAura's execution context
- Follow WoW API security guidelines
- Use if/else instead of goto/labels for control flow
- Structure loops with clear exit conditions

### 3.8 Control Flow Examples
```lua
-- INCORRECT (Will cause error in WoW Classic):
for i = 1, 40 do
    if condition then
        goto continue
    end
    -- code
    ::continue::
end

-- CORRECT (Use this instead):
for i = 1, 40 do
    if not condition then
        -- code
    end
end

-- Alternative (Using nested if):
for i = 1, 40 do
    if validateUnit(unit) then
        if validateGUID(guid) then
            -- process unit
        end
    end
end
```

## 4. Testing & Troubleshooting

### 4.1 Common Issues and Solutions

#### State Management Issues
- **Problem**: States not updating
  ```lua
  -- Common mistake
  allstates[key].show = true  -- Missing changed = true
  
  -- Correct implementation
  allstates[key] = allstates[key] or {show = false}
  allstates[key].changed = true
  allstates[key].show = true
  ```

- **Problem**: State leaks
  ```lua
  -- Add cleanup logic
  for key in pairs(allstates) do
      if not currentUnits[key] then
          allstates[key].show = false
          allstates[key].changed = true
      end
  end
  ```

#### Performance Issues
- **Problem**: Excessive updates
  ```lua
  -- Add throttling
  if not aura_env.last or GetTime() - aura_env.last > 0.2 then
      aura_env.last = GetTime()
      -- Processing logic
  end
  ```

- **Problem**: Memory leaks
  ```lua
  -- Implement cleanup
  aura_env.cache = aura_env.cache or {}
  
  -- Clear old data
  local currentTime = GetTime()
  for guid, data in pairs(aura_env.cache) do
      if currentTime - data.timestamp > 5 then
          aura_env.cache[guid] = nil
      end
  end
  ```

### 4.2 Debugging Techniques

#### Debug Output
```lua
aura_env.debug = true  -- Toggle debug mode

local function debugPrint(...)
    if aura_env.debug then
        print(string.format("[WeakAura Debug] %s", string.format(...)))
    end
end

function(allstates)
    debugPrint("Starting scan")
    debugPrint("Active states: %d", pairs(allstates))
    -- Main logic
    debugPrint("Scan complete")
end
```

#### State Inspection
```lua
local function inspectStates(allstates)
    if not aura_env.debug then return end
    
    print("=== State Inspection ===")
    for key, state in pairs(allstates) do
        print(string.format("Key: %s", key))
        for k, v in pairs(state) do
            print(string.format("  %s: %s", k, tostring(v)))
        end
    end
    print("=====================")
end
```

### 4.3 Testing Framework

#### Unit Test Pattern
```lua
aura_env.tests = {
    validateUnit = function()
        local tests = {
            {unit = "player", expected = true},
            {unit = nil, expected = false},
            {unit = "invalidunit", expected = false}
        }
        
        for _, test in ipairs(tests) do
            local result = validateUnit(test.unit)
            if result ~= test.expected then
                print(string.format("Test failed: %s", test.unit))
            end
        end
    end,
    
    runAll = function()
        for name, func in pairs(aura_env.tests) do
            if name ~= "runAll" then
                print(string.format("Running %s", name))
                func()
            end
        end
    end
}
```

### 4.4 Best Practices

1. **Initialization**
   - Always initialize state variables
   - Use default values
   - Check for nil conditions

2. **Error Handling**
   - Implement early returns
   - Validate inputs
   - Handle edge cases

3. **Performance**
   - Use throttling
   - Implement caching
   - Clean up unused states

4. **Debugging**
   - Add debug flags
   - Use descriptive messages
   - Implement state inspection

5. **Testing**
   - Test edge cases
   - Verify state transitions
   - Check performance impact

### 4.5 Advanced Troubleshooting

#### Diagnosing State Management Issues
```lua
-- Diagnostic utility for state tracking
aura_env.diagnostics = {
    stateHistory = {},
    maxHistory = 10,
    
    captureState = function(self, allstates, trigger)
        -- Create a state snapshot
        local snapshot = {
            timestamp = GetTime(),
            trigger = trigger or "unknown",
            stateCount = 0,
            activeCount = 0,
            states = {}
        }
        
        -- Analyze states
        for key, state in pairs(allstates) do
            snapshot.stateCount = snapshot.stateCount + 1
            if state.show then
                snapshot.activeCount = snapshot.activeCount + 1
                -- Store basic info for active states
                snapshot.states[key] = {
                    show = state.show,
                    changed = state.changed,
                    -- Add other important properties
                }
            end
        end
        
        -- Add to history
        table.insert(self.stateHistory, 1, snapshot)
        -- Trim history if needed
        if #self.stateHistory > self.maxHistory then
            table.remove(self.stateHistory)
        end
        
        return snapshot
    end,
    
    printHistory = function(self)
        print("=== WeakAura State History ===")
        for i, snapshot in ipairs(self.stateHistory) do
            print(string.format("[%d] %.2fs ago: %s - %d states (%d active)", 
                i, GetTime() - snapshot.timestamp, snapshot.trigger,
                snapshot.stateCount, snapshot.activeCount))
        end
    end,
    
    analyzeChanges = function(self)
        if #self.stateHistory < 2 then
            print("Not enough history to analyze changes")
            return
        end
        
        local current = self.stateHistory[1]
        local previous = self.stateHistory[2]
        
        print("=== State Changes Analysis ===")
        print(string.format("Trigger: %s → %s", previous.trigger, current.trigger))
        print(string.format("Total States: %d → %d", previous.stateCount, current.stateCount))
        print(string.format("Active States: %d → %d", previous.activeCount, current.activeCount))
        
        -- Compare state keys
        local added = {}
        local removed = {}
        local changed = {}
        
        for key in pairs(current.states) do
            if not previous.states[key] then
                table.insert(added, key)
            end
        end
        
        for key in pairs(previous.states) do
            if not current.states[key] then
                table.insert(removed, key)
            elseif current.states[key].changed then
                table.insert(changed, key)
            end
        end
        
        if #added > 0 then print("Added states: " .. table.concat(added, ", ")) end
        if #removed > 0 then print("Removed states: " .. table.concat(removed, ", ")) end
        if #changed > 0 then print("Changed states: " .. table.concat(changed, ", ")) end
    end
}

-- Usage example
function(allstates, event, ...)
    -- Capture state at beginning
    aura_env.diagnostics:captureState(allstates, "start-" .. (event or "unknown"))
    
    -- Normal processing...
    
    -- Capture state at end
    aura_env.diagnostics:captureState(allstates, "end-" .. (event or "unknown"))
    
    -- Print analysis on demand (can be triggered by a custom WeakAura event)
    if event == "WA_DIAGNOSTICS_REQUEST" then
        aura_env.diagnostics:printHistory()
        aura_env.diagnostics:analyzeChanges()
    end
    
    return true
end
```

#### Performance Bottleneck Detection
```lua
-- Bottleneck detection utility
aura_env.profiler = {
    enabled = false,
    samples = {},
    maxSamples = 20,
    
    start = function(self, label)
        if not self.enabled then return end
        self.current = {
            label = label,
            startTime = debugprofilestop(),
            segments = {}
        }
    end,
    
    segment = function(self, segmentLabel)
        if not self.enabled or not self.current then return end
        local now = debugprofilestop()
        table.insert(self.current.segments, {
            label = segmentLabel,
            time = now,
            duration = now - (self.current.segments[#self.current.segments] 
                              and self.current.segments[#self.current.segments].time 
                              or self.current.startTime)
        })
    end,
    
    finish = function(self)
        if not self.enabled or not self.current then return end
        local now = debugprofilestop()
        self.current.totalTime = now - self.current.startTime
        
        -- Add to samples
        table.insert(self.samples, 1, self.current)
        if #self.samples > self.maxSamples then
            table.remove(self.samples)
        end
        
        self.current = nil
    end,
    
    report = function(self)
        if #self.samples == 0 then
            print("No profiling data available")
            return
        end
        
        print("=== WeakAura Performance Report ===")
        
        -- Calculate averages
        local samplesByLabel = {}
        for _, sample in ipairs(self.samples) do
            if not samplesByLabel[sample.label] then
                samplesByLabel[sample.label] = {
                    count = 0,
                    totalTime = 0,
                    samples = {}
                }
            end
            
            local labelData = samplesByLabel[sample.label]
            labelData.count = labelData.count + 1
            labelData.totalTime = labelData.totalTime + sample.totalTime
            table.insert(labelData.samples, sample)
        end
        
        -- Print summary
        for label, data in pairs(samplesByLabel) do
            local avgTime = data.totalTime / data.count
            print(string.format("%s: %.2fms avg (samples: %d)", 
                  label, avgTime, data.count))
            
            -- Find slowest sample
            table.sort(data.samples, function(a, b) 
                return a.totalTime > b.totalTime 
            end)
            
            local slowest = data.samples[1]
            print(string.format("  Slowest: %.2fms", slowest.totalTime))
            
            for _, segment in ipairs(slowest.segments) do
                print(string.format("    - %s: %.2fms", segment.label, segment.duration))
            end
        end
    end
}

-- Usage example
function(allstates, event, ...)
    aura_env.profiler:start("TRIGGER_UPDATE")
    
    -- Process nameplate scanning
    aura_env.profiler:segment("nameplate_scan_start")
    for i = 1, 40 do
        local unit = "nameplate"..i
        if UnitExists(unit) then
            -- Process unit
        end
    end
    aura_env.profiler:segment("nameplate_scan_end")
    
    -- Update states
    aura_env.profiler:segment("state_update_start")
    for guid, state in pairs(allstates) do
        -- Update state
    end
    aura_env.profiler:segment("state_update_end")
    
    aura_env.profiler:finish()
    
    -- Report on command
    if event == "WA_PROFILE_REPORT" then
        aura_env.profiler:report()
    end
    
    return true
end
```

#### Cross-Aura Communication Troubleshooting
```lua
-- Debug utility for cross-aura communication
aura_env.commsDebug = {
    sent = {},
    received = {},
    maxHistory = 20,
    
    logSent = function(self, targetAura, messageType, data)
        table.insert(self.sent, 1, {
            timestamp = GetTime(),
            target = targetAura,
            type = messageType,
            data = data
        })
        
        if #self.sent > self.maxHistory then
            table.remove(self.sent)
        end
    end,
    
    logReceived = function(self, sourceAura, messageType, data)
        table.insert(self.received, 1, {
            timestamp = GetTime(),
            source = sourceAura,
            type = messageType,
            data = data
        })
        
        if #self.received > self.maxHistory then
            table.remove(self.received)
        end
    end,
    
    printLog = function(self)
        print("=== WeakAuras Communication Log ===")
        print("--- Sent Messages ---")
        for i, msg in ipairs(self.sent) do
            print(string.format("[%d] To: %s, Type: %s, %.2fs ago", 
                  i, msg.target, msg.type, GetTime() - msg.timestamp))
        end
        
        print("--- Received Messages ---")
        for i, msg in ipairs(self.received) do
            print(string.format("[%d] From: %s, Type: %s, %.2fs ago", 
                  i, msg.source, msg.type, GetTime() - msg.timestamp))
        end
    end
}

-- Example sender aura
function(allstates, event, ...)
    -- Send data to another aura
    local data = { value = 42, status = "active" }
    WeakAuras.ScanEvents("CUSTOM_MESSAGE_FOR_TARGET_AURA", data)
    aura_env.commsDebug:logSent("TargetAura", "CUSTOM_MESSAGE", data)
    
    return true
end

-- Example receiver aura
function(allstates, event, ...)
    if event == "CUSTOM_MESSAGE_FOR_TARGET_AURA" then
        local data = ...
        aura_env.commsDebug:logReceived("SourceAura", "CUSTOM_MESSAGE", data)
        -- Process data
    end
    
    if event == "WA_COMMS_DEBUG" then
        aura_env.commsDebug:printLog()
    end
    
    return true
end
```

## 5. Resources & References

### 5.1 WoW API Resources
- [WoW API Documentation](https://wowpedia.fandom.com/wiki/World_of_Warcraft_API)
- Classic WoW API limitations and differences
- Secure environment restrictions

### 5.2 WeakAuras Documentation
- [WeakAuras Documentation](https://github.com/WeakAuras/WeakAuras2/wiki)
- Custom trigger types and usage
- State management system
- Event handling

### 5.3 Lua Resources
- Lua 5.1 specification (WoW's version)
- Performance best practices
- Memory management
- Table handling

### 5.4 Common API Functions

#### Unit Information
```lua
-- Unit existence and validation
UnitExists(unit)
UnitIsVisible(unit)
UnitIsDeadOrGhost(unit)
UnitGUID(unit)

-- Unit properties
UnitHealth(unit)
UnitHealthMax(unit)
UnitPower(unit)
UnitPowerMax(unit)

-- Unit relationships
UnitIsUnit(unit1, unit2)
UnitCanAttack(unit1, unit2)
UnitIsFriend(unit1, unit2)
```

#### Combat Information
```lua
-- Combat state
UnitAffectingCombat(unit)
InCombatLockdown()

-- Casting
UnitCastingInfo(unit)
UnitChannelInfo(unit)

-- Combat log
CombatLogGetCurrentEventInfo()
```

#### Group Functions
```lua
-- Group status
IsInGroup()
IsInRaid()
GetNumGroupMembers()

-- Group iteration
for i = 1, GetNumGroupMembers() do
    local unit = IsInRaid() and "raid"..i or "party"..i
end
```

### 5.5 Performance Guidelines

1. **Update Frequency**
   - 0.1s minimum for combat-critical updates
   - 0.2s standard for regular updates
   - 0.5s+ for non-critical updates

2. **Memory Usage**
   - Clear unused states
   - Limit table sizes
   - Use local variables

3. **CPU Usage**
   - Throttle scans
   - Cache results
   - Use early returns

### 5.6 Security Notes

1. **Protected Functions**
   - Cannot be called during combat
   - Require user interaction
   - Hardware events only

2. **Secure Environment**
   - Limited API access
   - No addon communication in combat
   - Frame manipulation restrictions

### 5.7 Common Patterns Reference

1. **State Management**
   ```lua
   allstates[key] = {
       show = true,
       changed = true,
       value = value,
       -- Additional state data
   }
   ```

2. **Event Handling**
   ```lua
   function(allstates, event, ...)
       if event == "SPECIFIC_EVENT" then
           -- Handle event
       end
   end
   ```

3. **Unit Tracking**
   ```lua
   for i = 1, 40 do
       local unit = "nameplate"..i
       if UnitExists(unit) then
           -- Process unit
       end
   end
   ```

### 5.8 Version Control
- Keep track of WeakAura versions
- Document changes
- Test across WoW versions
- Maintain compatibility

### 5.9 Classic WoW Nameplate Unit Data
When a player identifies a mob via its nameplate in Classic WoW, the following unit information becomes available using the unit ID format "nameplate[1-40]":

#### Basic Unit Information
```lua
-- Basic unit data
local unitName = UnitName(unit)         -- Name of the unit
local unitGUID = UnitGUID(unit)         -- Globally unique identifier
local unitLevel = UnitLevel(unit)       -- Level of the unit (returns -1 for bosses or much higher level units)
local unitClass = UnitClassification(unit) -- Returns "worldboss", "elite", "rare", "rareelite", or "normal"
local exists = UnitExists(unit)         -- Check if unit still exists (is visible)
```

#### Combat and Targeting Information
```lua
-- Targeting and threat
local canAttack = UnitCanAttack("player", unit)  -- Check if unit is attackable by player
local isTarget = UnitIsUnit(unit, "target")      -- Check if unit is player's current target
local unitTarget = unit.."target"                -- Get what the unit is targeting (e.g., "nameplate1target")
local inCombat = UnitAffectingCombat(unit)       -- Check if unit is in combat

-- Threat information (returns multiple values)
local isTanking, status, threatpct, rawthreatpct, threatvalue = 
    UnitDetailedThreatSituation("player", unit)
```

#### Unit Statistics
```lua
-- Health information
local health = UnitHealth(unit)         -- Current health value
local maxHealth = UnitHealthMax(unit)   -- Maximum health value
local healthPercent = health / maxHealth * 100

-- Power information (mana, rage, energy, etc.)
local power = UnitPower(unit)           -- Current power value
local maxPower = UnitPowerMax(unit)     -- Maximum power value
local powerType = UnitPowerType(unit)   -- Type of power (0=mana, 1=rage, 2=focus, 3=energy, etc.)
```

#### Unit Type Information
```lua
-- Creature information
local creatureType = UnitCreatureType(unit)   -- Returns "Beast", "Humanoid", "Demon", etc.
local creatureFamily = UnitCreatureFamily(unit)  -- Returns the creature family

-- Faction and reaction
local faction, localizedFaction = UnitFactionGroup(unit)
local reaction = UnitReaction("player", unit)  -- 1=hostile, 4=neutral, 5=friendly
```

#### Unit Status Effects
```lua
-- Buff checking (multiple approaches)
local buffName, _, _, _, _, _, _, _, _, buffSpellId = UnitBuff(unit, index)
-- or
local auraName, _, _, _, _, _, _, _, _, auraSpellId = 
    UnitAura(unit, index, "HELPFUL")

-- Debuff checking
local debuffName, _, _, _, _, _, _, _, _, debuffSpellId = UnitDebuff(unit, index)
-- or
local auraName, _, _, _, _, _, _, _, _, auraSpellId = 
    UnitAura(unit, index, "HARMFUL")

-- Raid target markers (1=star, 2=circle, 3=diamond, 4=triangle, 5=moon, 6=square, 7=cross, 8=skull)
local markerIndex = GetRaidTargetIndex(unit)
```

#### Positional Information
```lua
-- Range checking
local inRange = WeakAuras.CheckRange(unit, 8, "<=")  -- Within 8 yards
-- or using spell range
local isInRange = IsSpellInRange("Spell Name", unit)  -- 1=in range, 0=out of range, nil=invalid
```

#### Implementation Example: Scanning Nameplates
```lua
function(allstates)
    -- Throttle updates for performance
    if not aura_env.last or GetTime() - aura_env.last > 0.3 then
        aura_env.last = GetTime()
        
        -- Initialize counters
        local friendlyCount = 0
        local enemyCount = 0
        
        -- Scan all nameplates (max 40)
        for i = 1, 40 do
            local unit = "nameplate"..i
            
            if UnitExists(unit) then
                local guid = UnitGUID(unit)
                local name = UnitName(unit)
                
                -- Process based on reaction
                if UnitCanAttack("player", unit) then
                    -- Enemy unit
                    enemyCount = enemyCount + 1
                    
                    -- Create or update state for this unit
                    allstates[guid] = allstates[guid] or {show = false}
                    allstates[guid].changed = true
                    allstates[guid].show = true
                    allstates[guid].unit = unit
                    allstates[guid].name = name
                    
                    -- Store additional information
                    allstates[guid].health = UnitHealth(unit)
                    allstates[guid].maxHealth = UnitHealthMax(unit)
                    allstates[guid].level = UnitLevel(unit)
                    
                    -- Check if targeting player
                    local targetUnit = unit.."target"
                    if UnitExists(targetUnit) and UnitIsUnit(targetUnit, "player") then
                        allstates[guid].targetingPlayer = true
                    else
                        allstates[guid].targetingPlayer = false
                    end
                else
                    -- Friendly unit
                    friendlyCount = friendlyCount + 1
                end
            end
        end
        
        -- Cleanup states for units no longer visible
        for guid, state in pairs(allstates) do
            if state.unit and not UnitExists(state.unit) then
                state.show = false
                state.changed = true
            end
        end
        
        -- Update global counts
        aura_env.enemyCount = enemyCount
        aura_env.friendlyCount = friendlyCount
        
        return true
    end
    
    return false
end
```

#### Best Practices for Nameplate Scanning
1. **Performance Optimization**
   - Always throttle nameplate scans (0.2-0.5 seconds recommended)
   - Store GUIDs rather than unit IDs for persistence
   - Use early returns for invalid conditions

2. **Error Handling**
   - Always check if a unit exists before accessing its properties
   - Validate GUIDs before using them as table keys
   - Handle unit disappearance gracefully

3. **Classic WoW Limitations**
   - Nameplate visibility is limited by distance and settings
   - Maximum of 40 nameplates can be displayed at once
   - Some APIs available in retail are not available in Classic
   - Threat data works differently in Classic compared to retail

## Changelog
- v1.2.0 (2023-04-14): Added Classic WoW nameplate unit data section (5.9)
- v1.1.0 (2023-01-21): Added advanced troubleshooting section (4.5)
- v1.0.0 (2023-01-19): Initial comprehensive documentation
