# Building WeakAuras: Comprehensive Guide for AI Implementation

## Table of Contents
1. Core Concepts & Architecture
2. Implementation Patterns
3. Advanced Techniques
4. Testing & Troubleshooting
5. Resources & References

## 1. Core Concepts & Architecture

### 1.1 WeakAura Fundamentals
- WeakAuras are custom displays that react to game conditions
- Each WeakAura consists of triggers, conditions, and actions
- WeakAuras operate within WoW's secure environment
- Custom triggers use Lua 5.1 compatible code
- In WeakAuras, the helper function needs to be defined before it's used, and it needs to be within the main function scope.

### 1.2 Basic Components
1. **Triggers**: Define when the aura should activate
   - Status Triggers: Monitor continuous states
   - Event Triggers: React to specific events
   - Custom Triggers: Complex logic and state management

2. **Conditions**: Additional requirements for activation
   - Combat state
   - Unit existence
   - Resource thresholds
   - Group composition

3. **Actions**: What happens when triggered
   - Visual updates
   - Mark management
   - State changes
   - Combat responses

### 1.3 Development Process
1. **Analysis**:
   ```lua
   -- Key considerations
   -- 1. What exact condition needs monitoring?
   -- 2. Which API calls are required?
   -- 3. What are the performance implications?
   -- 4. What states need tracking?
   ```

2. **Design**:
   ```lua
   -- Core structure
   function(allstates)
       -- 1. Initialize state variables
       aura_env.states = aura_env.states or {}
       
       -- 2. Define helper functions
       local function validateConditions()
           -- Validation logic
       end
       
       -- 3. Main processing logic
       if validateConditions() then
           -- Update states
       end
       
       return true
   end
   ```

3. **Implementation Best Practices**:
   - Use early returns for invalid conditions
   - Initialize all state variables
   - Implement clear error handling
   - Add descriptive comments
   - Follow WoW API security guidelines

## 2. Implementation Patterns

### 2.1 State Management

#### Basic State Tracking
```lua
function(allstates)
    -- Initialize state variables
    aura_env.states = aura_env.states or {}
    aura_env.last = aura_env.last or 0
    
    -- Performance throttling
    if not aura_env.last or GetTime() - aura_env.last > 0.2 then
        aura_env.last = GetTime()
        
        -- Update states
        allstates[""] = allstates[""] or {show = false}
        allstates[""].changed = true
        allstates[""].show = true
        
        return true
    end
    return false
end
```

#### Multi-State Management
```lua
function(allstates)
    -- Initialize tracking tables
    aura_env.activeStates = aura_env.activeStates or {}
    aura_env.pendingUpdates = aura_env.pendingUpdates or {}
    
    -- Process state updates
    for key, value in pairs(aura_env.pendingUpdates) do
        allstates[key] = allstates[key] or {show = false}
        allstates[key].changed = true
        allstates[key].value = value
        allstates[key].show = value > 0
    end
    
    -- Cleanup old states
    for key in pairs(allstates) do
        if not aura_env.activeStates[key] then
            allstates[key].show = false
            allstates[key].changed = true
        end
    end
    
    return true
end
```

### 2.2 Event Handling

#### Combat Log Processing
```lua
function(allstates, event, ...)
    if event == "COMBAT_LOG_EVENT_UNFILTERED" then
        local timestamp, subevent, _, sourceGUID, sourceName, _, _, 
              destGUID, destName, _, _, spellID = CombatLogGetCurrentEventInfo()
              
        if subevent == "SPELL_CAST_SUCCESS" then
            allstates[destGUID] = allstates[destGUID] or {show = false}
            allstates[destGUID].show = true
            allstates[destGUID].changed = true
            allstates[destGUID].spellID = spellID
            
            -- Auto-hide after 2 seconds
            C_Timer.After(2, function()
                allstates[destGUID].show = false
                allstates[destGUID].changed = true
                WeakAuras.ScanEvents("TRIGGER_RESET")
            end)
        end
    end
    return true
end
```

### 2.3 Unit Tracking

#### Nameplate Scanning
```lua
function(allstates)
    if not aura_env.last or GetTime() - aura_env.last > 0.3 then
        aura_env.last = GetTime()
        
        -- Scan visible nameplates
        for i = 1, 40 do
            local unit = "nameplate"..i
            if UnitExists(unit) and UnitCanAttack("player", unit) then
                local guid = UnitGUID(unit)
                if guid then
                    allstates[guid] = allstates[guid] or {show = false}
                    allstates[guid].show = true
                    allstates[guid].changed = true
                    allstates[guid].unit = unit
                end
            end
        end
        
        -- Cleanup non-existent units
        for guid, state in pairs(allstates) do
            if not UnitExists(state.unit) then
                state.show = false
                state.changed = true
            end
        end
        
        return true
    end
    return false
end
```

### 2.4 Pet & Aggro Management

#### Pet Aggro State Tracking
```lua
function(allstates)
    -- Initialize tracking variables
    aura_env.aggroUnits = aura_env.aggroUnits or {}
    aura_env.previousMarks = aura_env.previousMarks or {}
    
    local function HasPlayerAggro(unit)
        if not UnitExists(unit) then return false end
        
        local targetUnit = unit.."target"
        if not UnitExists(targetUnit) then return false end
        
        -- Check pet aggro first
        if UnitExists("pet") and UnitIsUnit(targetUnit, "pet") then
            return false
        end
        
        return UnitIsUnit(targetUnit, "player")
    end
    
    -- Scan units and update marks
    for i = 1, 40 do
        local unit = "nameplate"..i
        if UnitExists(unit) then
            local guid = UnitGUID(unit)
            if guid then
                local hasAggro = HasPlayerAggro(unit)
                local currentMark = GetRaidTargetIndex(unit)
                
                if hasAggro then
                    -- Store previous mark and apply triangle
                    if not aura_env.aggroUnits[guid] and currentMark then
                        aura_env.previousMarks[guid] = currentMark
                    end
                    SetRaidTarget(unit, TRIANGLE)
                    aura_env.aggroUnits[guid] = true
                elseif aura_env.aggroUnits[guid] then
                    -- Restore previous mark when aggro is lost
                    local previousMark = aura_env.previousMarks[guid]
                    SetRaidTarget(unit, previousMark or 0)
                    aura_env.aggroUnits[guid] = nil
                    aura_env.previousMarks[guid] = nil
                end
            end
        end
    end
    
    return true
end
```

### 2.5 Inter-Aura Communication

#### Sharing Data Between Auras
```lua
-- Method 1: Using WeakAuras.GetData()
-- In Source Aura (e.g., TTD Calculator)
aura_env.sharedData = aura_env.sharedData or {}
aura_env.sharedData.ttd = 5.2
aura_env.sharedData.totalDPS = 1250

-- In Consumer Aura (e.g., Spell Suggester)
local ttdAura = WeakAuras.GetData("TTDCalculator")
if ttdAura and ttdAura.sharedData then
    local ttd = ttdAura.sharedData.ttd
    local dps = ttdAura.sharedData.totalDPS
end
```

#### Custom Event Communication
```lua
-- In Source Aura
WeakAuras.ScanEvents("TTD_UPDATE", ttdValue, totalDPS)

-- In Consumer Aura (needs to register for "TTD_UPDATE" event)
function(allstates, event, ...)
    if event == "TTD_UPDATE" then
        local ttd, dps = ...
        -- Handle the TTD update
        allstates[""].ttd = ttd
        allstates[""].dps = dps
        allstates[""].changed = true
    end
end
```

#### Best Practices for Inter-Aura Communication
1. **Data Sharing**
   - Use meaningful data structure names
   - Document shared data format
   - Include version checking
   - Handle nil cases

2. **Event Broadcasting**
   - Use descriptive event names
   - Include relevant data
   - Handle missing subscribers
   - Implement error checking

3. **Performance Considerations**
   - Throttle update frequency
   - Minimize shared data size
   - Clean up stale references
   - Cache frequently accessed data

## 3. Advanced Techniques

### 3.1 Performance Optimization

#### Throttling Pattern
```lua
function(allstates)
    -- Initialize throttle timer
    aura_env.last = aura_env.last or 0
    
    -- Throttle updates (0.2s minimum between updates)
    if not aura_env.last or GetTime() - aura_env.last > 0.2 then
        aura_env.last = GetTime()
        -- Main processing logic here
        return true
    end
    return false
end
```

#### State Caching
```lua
-- Example: Caching unit data
aura_env.unitCache = aura_env.unitCache or {
    data = {},
    timestamp = 0,
    duration = 0.5  -- Cache duration in seconds
}

local function getUnitData(unit)
    local guid = UnitGUID(unit)
    local currentTime = GetTime()
    
    -- Return cached data if valid
    if aura_env.unitCache.data[guid] and 
       currentTime - aura_env.unitCache.timestamp < aura_env.unitCache.duration then
        return aura_env.unitCache.data[guid]
    end
    
    -- Update cache with new data
    local data = {
        health = UnitHealth(unit),
        maxHealth = UnitHealthMax(unit),
        power = UnitPower(unit),
        position = {unit:GetPosition()}
    }
    
    aura_env.unitCache.data[guid] = data
    aura_env.unitCache.timestamp = currentTime
    
    return data
end
```

### 3.2 Priority Systems

#### Spell Priority Management
```lua
local SPELL_PRIORITIES = {
    INTERRUPT = 4,    -- Highest priority
    HEALING = 3,
    CONTROL = 2,
    DAMAGE = 1       -- Lowest priority
}

local function getSpellPriority(spellID, targetUnit)
    -- Early exit if spell or unit is invalid
    if not spellID or not UnitExists(targetUnit) then return 0 end
    
    -- Get spell category and base priority
    local category = GetSpellCategory(spellID)
    local basePriority = SPELL_PRIORITIES[category] or 0
    
    -- Adjust priority based on conditions
    local adjustedPriority = basePriority
    
    -- Increase priority for low health targets
    if UnitHealth(targetUnit)/UnitHealthMax(targetUnit) < 0.3 then
        adjustedPriority = adjustedPriority + 1
    end
    
    -- Increase priority for player targets
    if UnitIsUnit(targetUnit.."target", "player") then
        adjustedPriority = adjustedPriority + 2
    end
    
    return adjustedPriority
end
```

### 3.3 State Transitions

#### State Machine Pattern
```lua
local STATE_TRANSITIONS = {
    IDLE = {
        onEnter = function(allstates) end,
        onExit = function(allstates) end,
        transitions = {
            COMBAT = function() return UnitAffectingCombat("player") end,
            CASTING = function() return UnitCastingInfo("player") end
        }
    },
    COMBAT = {
        onEnter = function(allstates)
            allstates[""].show = true
            allstates[""].changed = true
        end,
        onExit = function(allstates)
            allstates[""].show = false
            allstates[""].changed = true
        end,
        transitions = {
            IDLE = function() return not UnitAffectingCombat("player") end
        }
    }
}

function(allstates)
    aura_env.currentState = aura_env.currentState or "IDLE"
    local state = STATE_TRANSITIONS[aura_env.currentState]
    
    -- Check transitions
    for newState, condition in pairs(state.transitions) do
        if condition() then
            -- Execute state change
            state.onExit(allstates)
            aura_env.currentState = newState
            STATE_TRANSITIONS[newState].onEnter(allstates)
            return true
        end
    end
    
    return false
end
```

### 3.4 Debug Tools

#### Performance Testing Framework
```lua
local DebugTools = {
    enabled = false,
    timers = {},
    
    startTimer = function(self, key)
        if not self.enabled then return end
        self.timers[key] = debugprofilestop()
    end,
    
    stopTimer = function(self, key)
        if not self.enabled or not self.timers[key] then return end
        local duration = debugprofilestop() - self.timers[key]
        print(string.format("%s: %.2fms", key, duration))
        self.timers[key] = nil
    end,
    
    log = function(self, ...)
        if not self.enabled then return end
        print(string.format("[DEBUG] %s", string.format(...)))
    end
}

-- Usage example
function(allstates)
    DebugTools:startTimer("scan")
    -- Scanning logic here
    DebugTools:stopTimer("scan")
    
    DebugTools:log("Processed %d units", numUnits)
end
```

### 3.5 Error Prevention

#### Validation Patterns
```lua
local function validateUnit(unit)
    if not unit then return false end
    if not UnitExists(unit) then return false end
    if not UnitIsVisible(unit) then return false end
    if UnitIsDeadOrGhost(unit) then return false end
    return true
end

local function validateGUID(guid)
    if not guid then return false end
    local unitType = strsplit("-", guid)
    return unitType ~= nil
end

local function safeGetUnitData(unit)
    if not validateUnit(unit) then
        return nil, "Invalid unit"
    end
    
    local guid = UnitGUID(unit)
    if not validateGUID(guid) then
        return nil, "Invalid GUID"
    end
    
    return {
        guid = guid,
        name = UnitName(unit),
        health = UnitHealth(unit),
        maxHealth = UnitHealthMax(unit)
    }
end
```

### 3.6 Unsupported or Risky Features
- goto statements (not supported in Lua 5.1/WoW Classic)
- labels (not supported in Lua 5.1/WoW Classic)
- Complex control flow structures
- Certain Lua 5.1+ features

### 3.7 Best Practices
- Use early returns for flow control
- Implement clear conditional blocks
- Keep code within WeakAura's execution context
- Follow WoW API security guidelines
- Use if/else instead of goto/labels for control flow
- Structure loops with clear exit conditions

### 3.8 Control Flow Examples
```lua
-- INCORRECT (Will cause error in WoW Classic):
for i = 1, 40 do
    if condition then
        goto continue
    end
    -- code
    ::continue::
end

-- CORRECT (Use this instead):
for i = 1, 40 do
    if not condition then
        -- code
    end
end

-- Alternative (Using nested if):
for i = 1, 40 do
    if validateUnit(unit) then
        if validateGUID(guid) then
            -- process unit
        end
    end
end
```

## 4. Testing & Troubleshooting

### 4.1 Common Issues and Solutions

#### State Management Issues
- **Problem**: States not updating
  ```lua
  -- Common mistake
  allstates[key].show = true  -- Missing changed = true
  
  -- Correct implementation
  allstates[key] = allstates[key] or {show = false}
  allstates[key].changed = true
  allstates[key].show = true
  ```

- **Problem**: State leaks
  ```lua
  -- Add cleanup logic
  for key in pairs(allstates) do
      if not currentUnits[key] then
          allstates[key].show = false
          allstates[key].changed = true
      end
  end
  ```

#### Performance Issues
- **Problem**: Excessive updates
  ```lua
  -- Add throttling
  if not aura_env.last or GetTime() - aura_env.last > 0.2 then
      aura_env.last = GetTime()
      -- Processing logic
  end
  ```

- **Problem**: Memory leaks
  ```lua
  -- Implement cleanup
  aura_env.cache = aura_env.cache or {}
  
  -- Clear old data
  local currentTime = GetTime()
  for guid, data in pairs(aura_env.cache) do
      if currentTime - data.timestamp > 5 then
          aura_env.cache[guid] = nil
      end
  end
  ```

### 4.2 Debugging Techniques

#### Debug Output
```lua
aura_env.debug = true  -- Toggle debug mode

local function debugPrint(...)
    if aura_env.debug then
        print(string.format("[WeakAura Debug] %s", string.format(...)))
    end
end

function(allstates)
    debugPrint("Starting scan")
    debugPrint("Active states: %d", pairs(allstates))
    -- Main logic
    debugPrint("Scan complete")
end
```

#### State Inspection
```lua
local function inspectStates(allstates)
    if not aura_env.debug then return end
    
    print("=== State Inspection ===")
    for key, state in pairs(allstates) do
        print(string.format("Key: %s", key))
        for k, v in pairs(state) do
            print(string.format("  %s: %s", k, tostring(v)))
        end
    end
    print("=====================")
end
```

### 4.3 Testing Framework

#### Unit Test Pattern
```lua
aura_env.tests = {
    validateUnit = function()
        local tests = {
            {unit = "player", expected = true},
            {unit = nil, expected = false},
            {unit = "invalidunit", expected = false}
        }
        
        for _, test in ipairs(tests) do
            local result = validateUnit(test.unit)
            if result ~= test.expected then
                print(string.format("Test failed: %s", test.unit))
            end
        end
    end,
    
    runAll = function()
        for name, func in pairs(aura_env.tests) do
            if name ~= "runAll" then
                print(string.format("Running %s", name))
                func()
            end
        end
    end
}
```

### 4.4 Best Practices

1. **Initialization**
   - Always initialize state variables
   - Use default values
   - Check for nil conditions

2. **Error Handling**
   - Implement early returns
   - Validate inputs
   - Handle edge cases

3. **Performance**
   - Use throttling
   - Implement caching
   - Clean up unused states

4. **Debugging**
   - Add debug flags
   - Use descriptive messages
   - Implement state inspection

5. **Testing**
   - Test edge cases
   - Verify state transitions
   - Check performance impact

## 5. Resources & References

### 5.1 WoW API Resources
- [WoW API Documentation](https://wowpedia.fandom.com/wiki/World_of_Warcraft_API)
- Classic WoW API limitations and differences
- Secure environment restrictions

### 5.2 WeakAuras Documentation
- [WeakAuras Documentation](https://github.com/WeakAuras/WeakAuras2/wiki)
- Custom trigger types and usage
- State management system
- Event handling

### 5.3 Lua Resources
- Lua 5.1 specification (WoW's version)
- Performance best practices
- Memory management
- Table handling

### 5.4 Common API Functions

#### Unit Information
```lua
-- Unit existence and validation
UnitExists(unit)
UnitIsVisible(unit)
UnitIsDeadOrGhost(unit)
UnitGUID(unit)

-- Unit properties
UnitHealth(unit)
UnitHealthMax(unit)
UnitPower(unit)
UnitPowerMax(unit)

-- Unit relationships
UnitIsUnit(unit1, unit2)
UnitCanAttack(unit1, unit2)
UnitIsFriend(unit1, unit2)
```

#### Combat Information
```lua
-- Combat state
UnitAffectingCombat(unit)
InCombatLockdown()

-- Casting
UnitCastingInfo(unit)
UnitChannelInfo(unit)

-- Combat log
CombatLogGetCurrentEventInfo()
```

#### Group Functions
```lua
-- Group status
IsInGroup()
IsInRaid()
GetNumGroupMembers()

-- Group iteration
for i = 1, GetNumGroupMembers() do
    local unit = IsInRaid() and "raid"..i or "party"..i
end
```

### 5.5 Performance Guidelines

1. **Update Frequency**
   - 0.1s minimum for combat-critical updates
   - 0.2s standard for regular updates
   - 0.5s+ for non-critical updates

2. **Memory Usage**
   - Clear unused states
   - Limit table sizes
   - Use local variables

3. **CPU Usage**
   - Throttle scans
   - Cache results
   - Use early returns

### 5.6 Security Notes

1. **Protected Functions**
   - Cannot be called during combat
   - Require user interaction
   - Hardware events only

2. **Secure Environment**
   - Limited API access
   - No addon communication in combat
   - Frame manipulation restrictions

### 5.7 Common Patterns Reference

1. **State Management**
   ```lua
   allstates[key] = {
       show = true,
       changed = true,
       value = value,
       -- Additional state data
   }
   ```

2. **Event Handling**
   ```lua
   function(allstates, event, ...)
       if event == "SPECIFIC_EVENT" then
           -- Handle event
       end
   end
   ```

3. **Unit Tracking**
   ```lua
   for i = 1, 40 do
       local unit = "nameplate"..i
       if UnitExists(unit) then
           -- Process unit
       end
   end
   ```

### 5.8 Version Control
- Keep track of WeakAura versions
- Document changes
- Test across WoW versions
- Maintain compatibility

---
End of Documentation
