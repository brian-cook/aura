Auto-Attacking Aura Progress Report

Summary of Attempts:
1. Event-Based Approach (UNIT_SPELLCAST_SUCCEEDED, COMBAT_LOG_EVENT_UNFILTERED)
   - We tried listening to spell cast events to detect auto-attacks (spellID 6603). 
   - This approach often didn’t fire reliably in Classic or certain contexts, resulting in no aura updates.
   - Some versions produced no output; others caused Lua errors.

2. OnUpdate Approach (Every Frame / Status Trigger)
   - We switched to a continuous check via “IsCurrentSpell(6603)” and “UnitAffectingCombat(‘player’)” on each frame.
   - This eliminated reliance on missing or skipped events. 
   - However, some versions threw Lua errors in WeakAuras 5.17.2 (Classic), and others did not display the aura at all.

3. References & Instructions:
   - We used “building_auras.txt” throughout these experiments to guide creation of custom functions, focusing on:
     • Identifying the condition: detecting auto-attack status.
     • Choosing suitable events or an OnUpdate check.
     • Writing and debugging the custom function by returning true/false to show/hide the aura.
   - Despite following these steps, the aura either failed to display, produced no output, or generated Lua errors in certain Classic versions of WeakAuras.

4. Latest Attempt (OnUpdate Approach):
   - Custom Function:
     ```lua
     function(allstates, event, ...)
         -- Initialize the aura state if not present
         if not allstates[""] then
             allstates[""] = { show = false, changed = false }
         end
         
         -- We only handle updates triggered by "OnUpdate" (the "Every Frame" status setting)
         if event == "OnUpdate" then
             local inCombat = UnitAffectingCombat("player")
             local autoAttacking = IsCurrentSpell(6603)
             
             -- Determine if aura should be shown (in combat + auto-attacking)
             local shouldShow = (inCombat and autoAttacking)
             local currentlyShown = allstates[""].show
             
             -- If our desired show state changed, update WeakAuras
             if shouldShow ~= currentlyShown then
                 allstates[""].show = shouldShow
                 allstates[""].changed = true
                 return true  -- Notify WeakAuras of a state change
             end
         end
         
         return false  -- No changes
     end
     ```
   - Implementation Steps:
     1. Type “/wa” in-game to open WeakAuras.
     2. Click “New” → Select “Custom.”
     3. Under Trigger:
        • Set “Type” to “Status.”
        • Look for “Check On” or “Event Type” and choose “Every Frame” or “On Update.”
     4. Paste the custom function above into the “Custom Function” field.
     5. Under “Custom Hide,” choose “Custom” and use:
        ```lua
        function()
            return false
        end
        ```
     6. (Optional) Adjust “Load” conditions to only show this aura for specific classes, level ranges, etc.
     7. Click “Done” or “Okay” to save.
   - Result: This approach did not work (the weak aura did not display), and it created Lua errors in WeakAuras.

5. Attempt to Print Combat Events:
   - Custom Function:
     ```lua
     function(allstates, event, ...)
         if event == "PLAYER_REGEN_DISABLED" then
             print("Event: PLAYER_REGEN_DISABLED - Entered combat")
         elseif event == "PLAYER_REGEN_ENABLED" then
             print("Event: PLAYER_REGEN_ENABLED - Left combat")
         elseif event == "PLAYER_ENTER_COMBAT" then
             print("Event: PLAYER_ENTER_COMBAT - Entered combat")
         elseif event == "PLAYER_LEAVE_COMBAT" then
             print("Event: PLAYER_LEAVE_COMBAT - Left combat")
         end
         return false
     end
     ```
   - Implementation Steps:
     1. Type “/wa” in-game to open WeakAuras.
     2. Click “New” → Select “Custom.”
     3. Under Trigger:
        • Set “Type” to “Event.”
        • Add the following events: `PLAYER_REGEN_DISABLED`, `PLAYER_REGEN_ENABLED`, `PLAYER_ENTER_COMBAT`, `PLAYER_LEAVE_COMBAT`.
     4. Paste the custom function above into the “Custom Function” field.
     5. Under “Custom Hide,” choose “Custom” and use:
        ```lua
        function()
            return false
        end
        ```
     6. (Optional) Adjust “Load” conditions to only show this aura for specific classes, level ranges, etc.
     7. Click “Done” or “Okay” to save.
   - Result: This approach did not produce any output.

6. Combined Events and OnUpdate Approach:
   - Custom Function:
     ```lua
     function(allstates, event, ...)
         -- Initialize the aura state if not present
         if not allstates[""] then
             allstates[""] = { show = false, changed = false }
         end

         -- Handle combat state changes
         if event == "PLAYER_REGEN_DISABLED" then
             aura_env.inCombat = true
         elseif event == "PLAYER_REGEN_ENABLED" then
             aura_env.inCombat = false
             allstates[""].show = false
             allstates[""].changed = true
             return true
         end

         -- Handle successful spell casts
         if event == "UNIT_SPELLCAST_SUCCEEDED" then
             local unit, spellName, _, spellID = ...
             if unit == "player" and spellID == 6603 then
                 aura_env.autoAttacking = true
             end
         end

         -- Periodic check to update aura state
         if event == "OnUpdate" then
             local shouldShow = aura_env.inCombat and aura_env.autoAttacking
             if allstates[""].show ~= shouldShow then
                 allstates[""].show = shouldShow
                 allstates[""].changed = true
                 return true
             end
         end

         return false
     end
     ```
   - Implementation Steps:
     1. Type “/wa” in-game to open WeakAuras.
     2. Click “New” → Select “Custom.”
     3. Under Trigger:
        • Set “Type” to “Event.”
        • Add the following events: `PLAYER_REGEN_DISABLED`, `PLAYER_REGEN_ENABLED`, `UNIT_SPELLCAST_SUCCEEDED`, `OnUpdate`.
     4. Paste the custom function above into the “Custom Function” field.
     5. Under “Custom Hide,” choose “Custom” and use:
        ```lua
        function()
            return false
        end
        ```
     6. (Optional) Adjust “Load” conditions to only show this aura for specific classes, level ranges, etc.
     7. Click “Done” or “Okay” to save.
   - Result: This approach created errors in WeakAuras: "This aura has caused a LUA error."

Next Steps / Notes to AI:
• We need a stable solution in Classic WoW (WeakAuras 5.17.2). 
• The aura must show if the player is auto-attacking in or out of combat and hide otherwise, without throwing Lua errors.
• The methods described in “building_auras.txt” (event-based vs. OnUpdate) must be adapted or combined to reliably reflect the auto-attack state in Classic.
• Please re-check known Classic quirks (e.g., older event names, different function signatures, or known WeakAuras limitations) to finalize a working solution.
• Once an attempt has not been successful, any new attempt should be updated to try something different, and those changes should be accurate and summarized during the update.